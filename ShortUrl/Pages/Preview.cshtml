@page "{code}"
@model ShortUrl.Pages.PreviewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "URL Preview";
    var ogMetadata = Model.UrlShort?.OgMetadataVariations?.FirstOrDefault(o => o.Id == Model.UrlShort?.CurrentOgMetadataIndex);
}

@if (ogMetadata != null)
{
    <meta property="og:title" content="@ogMetadata.Title" />
    <meta property="og:description" content="@ogMetadata.Description" />
    <meta property="og:image" content="@ogMetadata.Image" />
    <meta property="og:url" content="@Model.ShortenedUrl" />
}

<div class="container">
    <h1 class="text-center my-4">@ViewData["Title"]</h1>

    @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @Model.ErrorMessage
        </div>
    }
    else if (Model.UrlShort != null)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h3 class="card-title">Shortened URL</h3>
                <p><strong>Shortened URL:</strong> <a href="@Model.ShortenedUrl" target="_blank">@Model.ShortenedUrl</a></p>
                <p><strong>Short Code:</strong> @Model.UrlShort.Code</p>
                <p><strong>Created By:</strong> @(Model.UrlShort.User?.UserName ?? "Unknown")</p>
                <p><strong>Created On:</strong> @Model.UrlShort.CreatedAt.ToString("g")</p>
                @if (Model.UrlShort.ExpirationDate.HasValue)
                {
                    <p><strong>Expires On:</strong> @Model.UrlShort.ExpirationDate.Value.ToString("g")</p>
                }
                <p><strong>Password Protected:</strong> @(string.IsNullOrEmpty(Model.UrlShort?.Password) ? "No" : "Yes")</p>
                <p><strong>Total Clicks:</strong> <span id="click-count">@Model.ClicksCount</span></p>
                <p><strong>QR Code:</strong></p>
                <img src="/qr/@Model.UrlShort?.Code" alt="QR Code" class="qr-code" />
            </div>
        </div>

        @if (Model.UrlShort != null && Model.UrlShort.DestinationUrls.Any())
        {
            <div class="card mb-4">
                <div class="card-body">
                    <h3 class="card-title">Destination URLs</h3>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>URL</th>
                                <th>Weight</th>
                                <th>UTM Parameters</th>
                                <th>Clicks</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var url in Model.UrlShort.DestinationUrls)
                            {
                                <tr>
                                    <td><a href="@url.Url" target="_blank">@url.Url</a></td>
                                    <td>@(url.Weight ?? 1)</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(url.UtmSource))
                                        {
                                            <span>UTM: @url.UtmSource, @url.UtmMedium, @url.UtmCampaign</span>
                                        }
                                        else
                                        {
                                            <span>None</span>
                                        }
                                    </td>
                                    <td><span class="destination-clicks-@url.Id">@Model.ClickCountsByDestination.GetValueOrDefault(url.Id, 0)</span></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        @if (Model?.UrlShort?.OgMetadataVariations?.Count > 0)
        {
            <div class="card mb-4">
                <div class="card-body">
                    <h3 class="card-title">Open Graph Metadata</h3>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Description</th>
                                <th>Image</th>
                                <th>Clicks</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var og in Model.UrlShort.OgMetadataVariations)
                            {
                                <tr>
                                    <td>@og.Title</td>
                                    <td>@og.Description</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(og.Image))
                                        {
                                            <a href="@og.Image" target="_blank">@og.Image</a>
                                        }
                                        else
                                        {
                                            <span>None</span>
                                        }
                                    </td>
                                    <td><span class="og-clicks-@og.Id">@Model.ClickCountsByOgMetadata.GetValueOrDefault(og.Id, 0)</span></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        @if (Model is { IsBasicOrHigher: true })
        {
            <div class="card mb-4">
                <div class="card-body">
                    <h3 class="card-title">Click Statistics</h3>
                    @if (Model.ClickStats.Any())
                    {
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>IP Address</th>
                                    <th>Country</th>
                                    <th>City</th>
                                    <th>Referrer</th>
                                    <th>Device</th>
                                    <th>Browser</th>
                                    <th>OS</th>
                                    <th>Language</th>
                                    <th>Screen Resolution</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var stat in Model.ClickStats)
                                {
                                    <tr>
                                        <td>@stat.ClickedAt.ToString("g")</td>
                                        <td>@(stat.IpAddress ?? "N/A")</td>
                                        <td>@(stat.Country ?? "N/A")</td>
                                        <td>@(stat.City ?? "N/A")</td>
                                        <td>@(stat.Referrer ?? "N/A")</td>
                                        <td>@(stat.Device ?? "N/A")</td>
                                        <td>@(stat.Browser ?? "N/A")</td>
                                        <td>@(stat.OperatingSystem ?? "N/A")</td>
                                        <td>@(stat.Language ?? "N/A")</td>
                                        <td>@(stat.ScreenResolution ?? "N/A")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <button onclick="downloadCSV()" class="btn btn-info">Export to CSV</button>
                    }
                    else
                    {
                        <p>No click statistics available for this URL.</p>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                Upgrade to a Basic, Professional, or Enterprise account to view click statistics.
                <a asp-page="/Account/Upgrade" class="btn btn-link">Upgrade Now</a>
            </div>
        }

        @if (User.IsInRole("Admin") || Model?.UrlShort?.UserId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
        {
            <div class="mt-3">
                <a href="/EditUrl/@Model?.UrlShort?.Id" class="btn btn-primary">Edit URL</a>
                <form method="post" asp-page-handler="Delete" class="d-inline">
                    <input type="hidden" name="code" value="@Model?.UrlShort?.Code" />
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this URL?');">Delete</button>
                </form>
            </div>
        }
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No URL data found for the provided slug.
        </div>
    }

    <div class="text-center mt-4">
        <a href="/Index" class="btn btn-link">Back to URLs</a>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@@latest/dist/browser/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/clickHub")
            .build();

        connection.on("ReceiveClickUpdate", (code, totalClicks, destinationClicks, ogClicks) => {
            if (code === '@Model?.UrlShort?.Code') {
                document.querySelector("#click-count").textContent = totalClicks;
                Object.keys(destinationClicks).forEach(id => {
                    const elem = document.querySelector(`.destination-clicks-${id}`);
                    if (elem) elem.textContent = destinationClicks[id];
                });
                Object.keys(ogClicks).forEach(id => {
                    const elem = document.querySelector(`.og-clicks-${id}`);
                    if (elem) elem.textContent = ogClicks[id];
                });
            }
        });

        connection.start().catch(err => console.error(err));
    </script>
    @if (Model!.IsBasicOrHigher && Model.ClickStats.Any())
    {
            var headers = new List<string> { "Time", "IP Address", "Country", "City", "Referrer", "Device", "Browser", "OS", "Language", "Screen Resolution" };
            var csvHeader = string.Join(",", headers);
            var csvRows = Model.ClickStats.Select(stat => string.Join(",", new[]
            {
                $"\"{stat.ClickedAt:g}\"",
                $"\"{stat.IpAddress ?? ""}\"",
                $"\"{stat.Country ?? ""}\"",
                $"\"{stat.City ?? ""}\"",
                $"\"{stat.Referrer ?? ""}\"",
                $"\"{stat.Device ?? ""}\"",
                $"\"{stat.Browser ?? ""}\"",
                $"\"{stat.OperatingSystem ?? ""}\"",
                $"\"{stat.Language ?? ""}\"",
                $"\"{stat.ScreenResolution ?? ""}\""
            }));
            var csv = string.Join("\n", new[] { csvHeader }.Concat(csvRows));
            <script>
                const csv = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(csv));
                function downloadCSV() {
                    const blob = new Blob([csv], { type: 'text/csv' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'click_stats_@Model.UrlShort?.Code';
                    a.click();
                    window.URL.revokeObjectURL(url);
                }
            </script> 
    }
 
    <style>
        .qr-code {
            max-width: 150px;
            margin-top: 10px;
        }
    </style>
}