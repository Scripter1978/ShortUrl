@page "/Stats/{id:int}/{pageNumber:int?}"
@model StatsModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "URL Statistics";
}

@if (!SignInManager.IsSignedIn(User) || !(await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Professional") || await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Enterprise")))
{
    <h1>Access Denied</h1>
    <p>Only Professional or Enterprise users can view URL statistics. Please <a asp-page="/Account/Login">log in</a> with an appropriate account.</p>
}
else if (Model.ShortUrl == null)
{
    <h1>URL Not Found</h1>
    <p>The requested URL does not exist or you don't have permission to view its statistics.</p>
    <a asp-page="/Index" class="btn btn-secondary">Back to URLs</a>
}
else
{
    <h1>Statistics for <a href="@($"{Request.Scheme}://{Request.Host}/{Model.ShortUrl.Code}")">@Model.ShortUrl.Code</a></h1>
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }
    <div class="row">
        <div class="col-md-6">
            <h3>Summary</h3>
            <p><strong>Total Clicks:</strong> @Model.TotalClicks</p>
            <p><strong>Unique IPs:</strong> @Model.UniqueIps</p>
            <p><strong>Created:</strong> @Model.ShortUrl.CreatedAt.ToString("g")</p>
            @if (Model.ShortUrl.ExpirationDate.HasValue)
            {
                <p><strong>Expires:</strong> @Model.ShortUrl.ExpirationDate.Value.ToString("g")</p>
            }
            @if (!string.IsNullOrEmpty(Model.ShortUrl.Password))
            {
                <p><strong>Password Protected:</strong> Yes</p>
            }
        </div>
        <div class="col-md-6">
            <h3>Actions</h3>
            <a asp-page="/EditUrl" asp-route-id="@Model.ShortUrl.Id" class="btn btn-primary">Edit URL</a>
            <a asp-page="/Index" class="btn btn-secondary">Back to URLs</a>
            <button onclick="downloadCSV()" class="btn btn-info">Export to CSV</button>
        </div>
    </div>
    <h3>A/B Testing Results</h3>
    <div class="row">
        <div class="col-md-6">
            <h4>Destination URLs</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>URL</th>
                        <th>Clicks</th>
                        <th>Weight</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var url in Model.DestinationUrlStats)
                    {
                        <tr>
                            <td>@url.Url</td>
                            <td>@url.Clicks</td>
                            <td>@(url.Weight ?? 1)</td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (Model.DestinationUrlStats.Any())
            {
                <h4>Click Distribution</h4>
                <canvas id="destinationUrlChart"></canvas>
            }
        </div>
        <div class="col-md-6">
            <h4>Social Media Metadata Variations</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Clicks</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var og in Model.OgMetadataStats)
                    {
                        <tr>
                            <td>@og.Title</td>
                            <td>@og.Clicks</td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (Model.OgMetadataStats.Any())
            {
                <h4>Metadata Click Distribution</h4>
                <canvas id="ogMetadataChart"></canvas>
            }
        </div>
    </div>
    <h3>Click Trends</h3>
    @if (Model.ClickTrends.Any())
    {
        <canvas id="clickTrendChart"></canvas>
    }
    <h3>Click Details</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Time</th>
                <th>IP Address</th>
                <th>Country</th>
                <th>City</th>
                @if (Model.IsProfessionalOrHigher)
                {
                    <th>Referrer</th>
                    <th>Device</th>
                    <th>Browser</th>
                    <th>OS</th>
                    <th>Language</th>
                    <th>Screen Resolution</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var click in Model.ClickStats)
            {
                <tr>
                    <td>@click.ClickedAt.ToString("g")</td>
                    <td>@click.IpAddress</td>
                    <td>@click.Country</td>
                    <td>@click.City</td>
                    @if (Model.IsProfessionalOrHigher)
                    {
                        <td>@click.Referrer</td>
                        <td>@click.Device</td>
                        <td>@click.Browser</td>
                        <td>@click.OperatingSystem</td>
                        <td>@click.Language</td>
                        <td>@click.ScreenResolution</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    @if (Model.TotalClicks > Model.PageSize)
    {
        <nav aria-label="Click stats pagination">
            <ul class="pagination">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-page="/Stats" asp-route-id="@Model.ShortUrl.Id" asp-route-pageNumber="@(Model.CurrentPage - 1)">Previous</a>
                    </li>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-page="/Stats" asp-route-id="@Model.ShortUrl.Id" asp-route-pageNumber="@i">@i</a>
                    </li>
                }
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-page="/Stats" asp-route-id="@Model.ShortUrl.Id" asp-route-pageNumber="@(Model.CurrentPage + 1)">Next</a>
                    </li>
                }
            </ul>
        </nav>
    }
    @if (await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Enterprise"))
    {
        <h3>Audit Logs</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Action</th>
                    <th>Details</th>
                    <th>Timestamp</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in Model.AuditLogs)
                {
                    <tr>
                        <td>@log.Action</td>
                        <td>@log.Details</td>
                        <td>@log.Timestamp.ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @if (Model.DestinationUrlStats.Any())
    {
        <chartjs>
            {
                "type": "pie",
                "data": {
                    "labels": [@string.Join(",", Model.DestinationUrlStats.Select(u => $"\"{u.Url}\"").ToArray())],
                    "datasets": [{
                        "label": "Clicks by Destination URL",
                        "data": [@string.Join(",", Model.DestinationUrlStats.Select(u => u.Clicks))],
                        "backgroundColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"]
                    }]
                },
                "options": {
                    "responsive": true,
                    "plugins": {
                        "legend": {
                            "position": "top"
                        },
                        "title": {
                            "display": true,
                            "text": "Click Distribution by Destination URL"
                        }
                    }
                }
            }
        </chartjs>
    }
    @if (Model.OgMetadataStats.Any())
    {
        <chartjs>
            {
                "type": "pie",
                "data": {
                    "labels": [@string.Join(",", Model.OgMetadataStats.Select(o => $"\"{o.Title}\"").ToArray())],
                    "datasets": [{
                        "label": "Clicks by Metadata Variation",
                        "data": [@string.Join(",", Model.OgMetadataStats.Select(o => o.Clicks))],
                        "backgroundColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF"]
                    }]
                },
                "options": {
                    "responsive": true,
                    "plugins": {
                        "legend": {
                            "position": "top"
                        },
                        "title": {
                            "display": true,
                            "text": "Click Distribution by Metadata Variation"
                        }
                    }
                }
            }
        </chartjs>
    }
    @if (Model.ClickTrends.Any())
    {
        <chartjs>
            {
                "type": "line",
                "data": {
                    "labels": [@string.Join(",", Model.ClickTrends.Select(t => $"\"{t.Date:yyyy-MM-dd}\"").ToArray())],
                    "datasets": [{
                        "label": "Clicks Over Time",
                        "data": [@string.Join(",", Model.ClickTrends.Select(t => t.Clicks))],
                        "borderColor": "#36A2EB",
                        "fill": false
                    }]
                },
                "options": {
                    "responsive": true,
                    "plugins": {
                        "title": {
                            "display": true,
                            "text": "Clicks Over Time"
                        }
                    },
                    "scales": {
                        "x": {
                            "title": {
                                "display": true,
                                "text": "Date"
                            }
                        },
                        "y": {
                            "title": {
                                "display": true,
                                "text": "Clicks"
                            }
                        }
                    }
                }
            }
        </chartjs>
    }
    
    @{
        // Define CSV headers
        var headers = new List<string> { "Time", "IP Address", "Country", "City" };
        if (Model.IsProfessionalOrHigher)
        {
            headers.AddRange(new[] { "Referrer", "Device", "Browser", "OS", "Language", "Screen Resolution" });
        }
        var csvHeader = string.Join(",", headers);

        // Generate CSV rows
        var csvRows = Model.ClickStats.Select(stat => 
        {
            var fields = new List<string>
            {
                $"\"{stat.ClickedAt.ToUniversalTime().ToString("o")}\"", // ISO 8601 format
                $"\"{stat.IpAddress ?? ""}\"",
                $"\"{stat.Country ?? ""}\"",
                $"\"{stat.City ?? ""}\""
            };

            if (Model.IsProfessionalOrHigher)
            {
                fields.AddRange(new[]
                {
                    $"\"{stat.Referrer ?? ""}\"",
                    $"\"{stat.Device ?? ""}\"",
                    $"\"{stat.Browser ?? ""}\"",
                    $"\"{stat.OperatingSystem ?? ""}\"",
                    $"\"{stat.Language ?? ""}\"",
                    $"\"{stat.ScreenResolution ?? ""}\""
                });
            }

            return string.Join(",", fields);
        });

        // Combine headers and rows into CSV string
        var csv = string.Join("\n", new[] { csvHeader }.Concat(csvRows));
    }
    <script>
        const csv = `@Html.Raw(csv)`;
        function downloadCSV() {
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'stats.csv';
            a.click();
            window.URL.revokeObjectURL(url);
        }
    </script>
}