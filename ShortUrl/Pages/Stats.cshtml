@page "/Stats/{id:int?}/{pageNumber:int?}"
@model StatsModel
@using System.Text.Json
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "URL Statistics";
}
<div class="container">
    <h1 class="text-center my-4">@ViewData["Title"]</h1>

    @if (!SignInManager.IsSignedIn(User) || !(await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Basic") || await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Professional") || await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Enterprise")))
    {
        <h1>Access Denied</h1>
        <p>Only Basic, Professional, or Enterprise users can view URL statistics. Please <a asp-page="/Account/Login">log in</a> with an appropriate account.</p>
        <p class="text-center"><a asp-page="/Account/Upgrade" class="btn btn-link">Upgrade Now</a></p>
    }
    else
    {
        @if (Model.ErrorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @Model.ErrorMessage
            </div>
        }
        @if (Model.UrlShort == null)
{
    <div class="card mb-4">
        <div class="card-body">
            <h3 class="card-title">URL Statistics Overview</h3>
            
            <form method="get" class="mb-4">
                <div class="row g-2 align-items-end">
                    <div class="col-auto">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" id="startDate" name="startDate" class="form-control" value="@Request.Query["startDate"]" />
                    </div>
                    <div class="col-auto">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" id="endDate" name="endDate" class="form-control" value="@Request.Query["endDate"]" />
                    </div>
                    <div class="col-auto">
                        <button type="submit" class="btn btn-primary">Filter</button>
                    </div>
                </div>
            </form>
            
            <div class="mb-4">
                <h4>Total Clicks: @Model.TotalClicks</h4>
                @if (Model.Dates.Any())
                {
                    <canvas id="clicksChart" width="400" height="200"></canvas>
                }
                else
                {
                    <p>No click data available for the selected period.</p>
                }
            </div>
            
            <h4>Your URLs</h4>
            @if (Model.UserUrls.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Short URL</th>
                            <th>Created At</th>
                            <th>Clicks</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var url in Model.UserUrls)
                        {
                            <tr>
                                <td><a href="@($"{Request.Scheme}://{Request.Host}/{url.Code}")" target="_blank">@url.Code</a></td>
                                <td>@url.CreatedAt.ToString("g")</td>
                                <td>@url.ClickStats.Count</td>
                                <td>
                                    <a asp-page="/Stats" asp-route-id="@url.Id" class="btn btn-primary btn-sm">View Details</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No URLs found.</p>
            }
        </div>
    </div>
}
else
{
            <div class="card mb-4">
                <div class="card-body">
                    <h3 class="card-title">URL Details</h3>
                    <p><strong>Shortened URL:</strong> <a href="@Model.ShortenedUrl" target="_blank">@Model.ShortenedUrl</a></p>
                    <p><strong>Short Code:</strong> @Model.UrlShort.Code</p>
                    <p><strong>Created By:</strong> @Model.UrlShort.User?.UserName</p>
                    <p><strong>Created On:</strong> @Model.UrlShort.CreatedAt.ToString("g")</p>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-body">
                    <h3 class="card-title">Click Statistics Over Time</h3>
                    @if (Model.Clicks.Any())
                    {
                        <canvas id="clicksChart" width="400" height="200"></canvas>
                        <button onclick="downloadCSV()" class="btn btn-info mt-3">Export to CSV</button>
                        <form method="get" class="mb-4">
                            <input type="hidden" name="id" value="@Model.UrlShort?.Id" />
                            <div class="row g-2 align-items-end">
                                <div class="col-auto">
                                    <label for="startDate" class="form-label">Start Date</label>
                                    <input type="date" id="startDate" name="startDate" class="form-control" value="@Request.Query["startDate"]" />
                                </div>
                                <div class="col-auto">
                                    <label for="endDate" class="form-label">End Date</label>
                                    <input type="date" id="endDate" name="endDate" class="form-control" value="@Request.Query["endDate"]" />
                                </div>
                                <div class="col-auto">
                                    <button type="submit" class="btn btn-primary">Filter</button>
                                </div>
                            </div>
                        </form>
                    }
                    else
                    {
                        <p>No click statistics available for this URL.</p>
                    }
                </div>
            </div>

            @if (Model.UrlShort.DestinationUrls.Any())
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h3 class="card-title">Destination URLs</h3>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>URL</th>
                                    <th>Weight</th>
                                    <th>UTM Parameters</th>
                                    <th>Clicks</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var url in Model.UrlShort.DestinationUrls)
                                {
                                    <tr>
                                        <td><a href="@url.Url" target="_blank">@url.Url</a></td>
                                        <td>@(url.Weight ?? 1)</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(url.UtmSource))
                                            {
                                                <span>UTM: @url.UtmSource, @url.UtmMedium, @url.UtmCampaign</span>
                                            }
                                            else
                                            {
                                                <span>None</span>
                                            }
                                        </td>
                                        <td><span class="destination-clicks-@url.Id">@Model.ClickCountsByDestination.GetValueOrDefault(url.Id, 0)</span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        } 

        <div class="text-center mt-4">
            <a href="/Index" class="btn btn-link">Back to URLs</a>
        </div>
    }
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const canvas = document.getElementById('clicksChart');
            if (canvas) {
                const ctx = canvas.getContext('2d');
                
                try {
                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: @Html.Raw(JsonSerializer.Serialize(Model.Dates)),
                            datasets: [{
                                label: 'Clicks',
                                data: @Html.Raw(JsonSerializer.Serialize(Model.Clicks)),
                                fill: true,
                                borderColor: 'rgb(75, 192, 192)',
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                tension: 0.4
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { display: true },
                                title: {
                                    display: true,
                                    text: 'Click Statistics Over Time'
                                }
                            },
                            scales: {
                                x: { display: true, title: { display: true, text: 'Date' } },
                                y: { display: true, title: { display: true, text: 'Clicks' }, beginAtZero: true }
                            }
                        }
                    });
                } catch (err) {
                    console.error("Error creating chart:", err);
                }
            }
        });
        
        @if (Model.UrlShort != null)
        {
            <text>
            // SignalR connection - only initialize when viewing a specific URL
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/clickHub")
                .build();

            connection.on("ReceiveClickUpdate", (id, totalClicks, destinationClicks, ogClicks) => {
                if (id === @Model.UrlShort.Id) {
                    Object.keys(destinationClicks).forEach(id => {
                        const elem = document.querySelector(`.destination-clicks-${id}`);
                        if (elem) elem.textContent = destinationClicks[id];
                    });
                }
            });

            connection.start().catch(err => console.error(err));
            </text>
        }
        
        @if (Model.UrlShort != null)
        {
            // Define CSV only for specific URL view
            var headers = new List<string> { "Time", "IP Address", "Country", "City" };
            if (Model.IsProfessionalOrHigher)
            {
                headers.AddRange(new[] { "Referrer", "Device", "Browser", "OS", "Language", "Screen Resolution" });
            }
            var csvHeader = string.Join(",", headers);

            var csvRows = Model.ClickStats.Select(stat =>
            {
                var fields = new List<string>
                {
                    $"\"{stat.ClickedAt.ToUniversalTime().ToString("o")}\"", 
                    $"\"{stat.IpAddress ?? ""}\"",
                    $"\"{stat.Country ?? ""}\"",
                    $"\"{stat.City ?? ""}\""
                };

                if (Model.IsProfessionalOrHigher)
                {
                    fields.AddRange(new[]
                    {
                        $"\"{stat.Referrer ?? ""}\"",
                        $"\"{stat.Device ?? ""}\"",
                        $"\"{stat.Browser ?? ""}\"",
                        $"\"{stat.OperatingSystem ?? ""}\"",
                        $"\"{stat.Language ?? ""}\"",
                        $"\"{stat.ScreenResolution ?? ""}\""
                    });
                }

                return string.Join(",", fields);
            });

            var csv = string.Join("\n", new[] { csvHeader }.Concat(csvRows));
            
            <text>
            const csv = `@Html.Raw(csv)`;
            function downloadCSV() {
                const blob = new Blob([csv], { type: 'text/csv' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'stats.csv';
                a.click();
                window.URL.revokeObjectURL(url);
            }
            </text>
        }
        else
        {
            <text>
            function downloadCSV() {
                alert('CSV download is only available when viewing a specific URL');
            }
            </text>
        }
    </script>
    <style>
        .qr-code {
            max-width: 150px;
            margin-top: 10px;
        }
    </style>
}